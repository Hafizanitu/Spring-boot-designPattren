Spring Initializr Configuration
Project: Maven
Language: Java
Packaging: Jar
Dependencies:
1.Spring Web
2.Spring Data JPA
3.MySQL Driver
**Click Generate ZIP, unzip the file.
Zip file ->choose file->Unzip
open intilij->open file ->select folder 
src->appliaction.java->database connect->src->resource->appliaction propertice
**** Database Configuration (MySQL)***
spring.application.name=student-info
spring.datasource.url=jdbc:mysql://localhost:3306/student_info
spring.datasource.username=root
spring.datasource.password= 
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update  //creates/updates table based on entity class
spring.jpa.show-sql=true              // prints SQL queries in the console


**Entity & Repository Example**
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
}
@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {
}
**Entity number=repository number
Repository extend jpaRepository**

****Lombok is a Java library that reduces boilerplate code like:
1.getters/setters 2.constructors 3.toString(), equals(), hashCode() 4.builder patterns...
how to setup lombok?
setting->plagin-> search lombok
           or
chrome search lombok maven repository->copy dependancy->pom.xml under dependancies paste the copy..

***How Controller, Service, Repository, and Entity Work***
Entity: Represents a table in the database. It holds fields (columns) and annotations like @Entity, @Id, etc.
Repository: Interface that extends JpaRepository or CrudRepository to handle database operations automatically (e.g., save(), findAll()).
Service: Contains business logic. It calls repository methods and processes data before returning it to the controller.
Controller: Handles incoming HTTP requests (like GET, POST) and calls the service to get or save data. Uses annotations like @RestController, @GetMapping, etc.
Together, this follows the MVC pattern (Model-View-Controller) where the Controller handles the web layer, Service the logic layer, and Repository the data layer.

API calling in JAVA*****
1.Get: means showing value. Method is declared inside the Controller class and before
method there is @GetMapping annotation and after Get Mapping annotation there is
the link of Get API. Example:
@GetMapping("/users")
public List<User> getAllUsers() {
    return userService.getAllUsers();
}
Now if we hit http://localhost:8080/student/homepage it will show Welcome to student
Page
2.POST: Means sending (inserting) new data
@PostMapping("/users")
public User createUser(@RequestBody User user) {
    return userService.createUser(user);
}
3.PUT: Means updating existing data. The method is declared with the @PutMapping
annotation. Used when we want to update an existing student. 
@PutMapping("/users/{id}")
public User updateUser(@PathVariable Long id, @RequestBody User userDetails) {
    return userService.updateUser(id, userDetails);
}
4.DELETE: Means removing existing data. The method uses @DeleteMapping.
Used to delete a student by ID or other criteria.
@DeleteMapping("/users/{id}")
public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
    userService.deleteUser(id);
    return ResponseEntity.noContent().build();
}

****Simple REST POST API (using controller, service, repository,entity) using Spring Boot***

//Under Controller package:
StudentController.class
@RestController
@AllArgsConstructor
public class Student {
 private final StudentService studentService;

 @PostMapping("/student/insert_student")
 public void insertStudent (@RequestBody StudentDTO studentDTO) { 
studentService.inserStudent(studentDTO);
 }
}
//Under Service package
StudentService.Class
@Service
@RequiredArgsConstructor
public class StudentService {
 private final StudentRepo studentRepo;
 public void inserStudent(StudentDTO studentDTO){
 Student student = new Student();
 student.setName(studentDTO.getName());
 student.setAddress(studentDTO.getAddress());
 studentRepo.save(student);
 }
}
//Under Repository package
StudentRepo.interface
@Repository
public interface StudentRepo extends JpaRepository<Student, Integer> {
}
//Under Entity Package:
Student.class
@Entity
@Getter
@Setter
s Student {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String address;
} 

**********Spring Security Setup:
In pom.xml-Copy
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>
create new package in main file as config under class as SecurityConfig
package com.example.TutorManagementSystem.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
                .username("user")
                .password("password1")
                .roles("USER")
                .build();

        UserDetails admin = User.withDefaultPasswordEncoder()
                .username("admin")
                .password("password2")
                .roles("ADMIN")
                .build();

        return new InMemoryUserDetailsManager(user, admin);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/public/", "/swagger-ui/", "/v3/api-docs/").permitAll()
                        .requestMatchers("/admin/").hasRole("ADMIN")
                        .requestMatchers("/user/").hasAnyRole("USER", "ADMIN")
                        .anyRequest().authenticated()
                )
                .formLogin(Customizer.withDefaults())
                .httpBasic(Customizer.withDefaults());

        return http.build();
    }
}
****auto-generating Swagger UI documentation for your Spring Boot REST APIs.
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    <version>2.8.9</version> <!-- Use the latest stable version -->
</dependency>
serch to see doc on REST API--http://localhost:8080/swagger-ui/index.html




