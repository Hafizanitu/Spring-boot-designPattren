Spring Initializr Configuration
Project: Maven
Language: Java
Packaging: Jar
Dependencies:
1.Spring Web
2.Spring Data JPA
3.MySQL Driver
**Click Generate ZIP, unzip the file.
Zip file ->choose file->Unzip
open intilij->open file ->select folder 
src->appliaction.java->database connect->src->resource->appliaction propertice
**** Database Configuration (MySQL)***
spring.application.name=student-info
spring.datasource.url=jdbc:mysql://localhost:3306/student_info
spring.datasource.username=root
spring.datasource.password= 
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update  //creates/updates table based on entity class
spring.jpa.show-sql=true              // prints SQL queries in the console


**Entity & Repository Example**
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
}
@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {
}
**Entity number=repository number
Repository extend jpaRepository**

****Lombok is a Java library that reduces boilerplate code like:
1.getters/setters 2.constructors 3.toString(), equals(), hashCode() 4.builder patterns...
how to setup lombok?
setting->plagin-> search lombok
           or
chrome search lombok maven repository->copy dependancy->pom.xml under dependancies paste the copy..

***How Controller, Service, Repository, and Entity Work***
Entity: Represents a table in the database. It holds fields (columns) and annotations like @Entity, @Id, etc.
Repository: Interface that extends JpaRepository or CrudRepository to handle database operations automatically (e.g., save(), findAll()).
Service: Contains business logic. It calls repository methods and processes data before returning it to the controller.
Controller: Handles incoming HTTP requests (like GET, POST) and calls the service to get or save data. Uses annotations like @RestController, @GetMapping, etc.
Together, this follows the MVC pattern (Model-View-Controller) where the Controller handles the web layer, Service the logic layer, and Repository the data layer.

Controller handle user request as API*****
1.
