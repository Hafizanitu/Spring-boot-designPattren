 What is a Bean?
A bean is just an object created and managed by Spring's IoC (Inversion of Control) container.
| Annotation        | Purpose                                                                     |
| ----------------- | --------------------------------------------------------------------------- |
| `@Component`      | Generic stereotype for any Spring-managed component (bean).                 |
| `@Service`        | Specialization of `@Component` for service-layer classes (business logic).  |
| `@Repository`     | Specialization of `@Component` for DAO layer, interacts with the database.  |
| `@Controller`     | Used to define web controller in MVC; handles user requests.                |
| `@RestController` | Same as `@Controller` + `@ResponseBody` â€” returns JSON/XML instead of view. |
| `@Entity`         | Marks a class as a JPA entity (maps to a DB table).                         |
| 	@Bean	           |Declare Spring-managed bean (e.g. read data from DB)                         |
|  @PostConstruct   |	Runs once after app starts                                                  |

*Spring MVC Flow
Client â†’ Controller â†’ Service â†’ Repository â†’ Database

IoC Container (ApplicationContext): Manages object creation and lifecycle.
Beans: All the objects managed by Spring.
Dependency Injection: Injecting required dependencies (beans) into classes automatically.
@Autowired: Automatically wires bean by type.
@Qualifier("productService1"): Used when multiple beans of the same type exist â€” tells Spring which one to use.

Singleton (default): Only one object of each bean is created and reused.
**Tight vs Loose Coupling
Tight: A a = new A(); (manual creation, hard to change)
Loose: @Autowired A a; (flexible, managed by Spring)

***different ways to create a Bean in Spring Boot**
///By creating Configure class an assigning Bean annotation before the function
@Cofiguration
public claass AccountConfig{
@Bean
public AccountService getAccountService(){
AccountService ac = new AccountService();
return new Accountservive();
}
}
class AccountService{
}
//By Annotation
@AnnotationName // @Service, @Component, @Controller,
@RestController or @Repository
class Car{
private String name;
private int miles;
Car(String name, int miles){
this.name = name;
this.miles = miles;
}
public void displayInfo(){
System.out.println("This is a car Named " + name + "Having
Miles " + miles);
}// those who needs the car object will have it
}// this Car class object now will be created and stored inside of IOC container

ACID Principles in Database Transactions:
ACID ensures that transactions are processed reliably in a database system.

ðŸ”¹ A â€“ Atomicity
A transaction is treated as a single unit.All steps must complete successfully, or none at all.If one step fails â†’ the entire transaction is rolled back.
Ensures no partial updates occur.
ðŸ›  Example (Git Analogy):
Imagine a feature branch being merged to the main branch.Before merge, it must pass all checks: code review, tests, approvals.
If one fails, merge is rejected â†’ similar to rollback.Only when all steps succeed, changes are committed to main.
ðŸ”¹ C â€“ Consistency
A transaction brings the database from one valid state to another.
All defined rules and constraints (like foreign keys, data types) must be respected before and after the transaction.Ensures data integrity.
ðŸ”¹ I â€“ Isolation
Ensures transactions are executed independently, even when run concurrently.Prevents interference between transactions.Isolation Levels (from low to high):
Level	Description	Problem it Allows
1.Read Uncommitted	Can read uncommitted (dirty) data	Dirty Reads
2.Read Committed	Only reads committed data	Non-Repeatable Reads
3.Repeatable Read	Same data read multiple times â†’ stays the same	Phantom Reads (but no non-repeatable)
4.Serializable	Highest level â€“ full isolation like queue system.Prevents all issues
âš  Common Issues in Isolation:
Dirty Read: Read uncommitted changes of another transaction.
Non-repeatable Read: Data changes between reads in the same transaction.
Phantom Read: New rows added by another transaction appear in re-queries.
ðŸ”¹ D â€“ Durability
Once a transaction is committed, the data is saved permanently.Survives system crashes, power loss, etc.Changes are written to non-volatile storage (like disk or SSD)


