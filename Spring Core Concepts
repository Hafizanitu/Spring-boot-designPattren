 What is a Bean?
A bean is just an object created and managed by Spring's IoC (Inversion of Control) container.
| Annotation        | Purpose                                                                     |
| ----------------- | --------------------------------------------------------------------------- |
| `@Component`      | Generic stereotype for any Spring-managed component (bean).                 |
| `@Service`        | Specialization of `@Component` for service-layer classes (business logic).  |
| `@Repository`     | Specialization of `@Component` for DAO layer, interacts with the database.  |
| `@Controller`     | Used to define web controller in MVC; handles user requests.                |
| `@RestController` | Same as `@Controller` + `@ResponseBody` — returns JSON/XML instead of view. |
| `@Entity`         | Marks a class as a JPA entity (maps to a DB table).                         |
| 	@Bean	           |Declare Spring-managed bean (e.g. read data from DB)                         |
|  @PostConstruct   |	Runs once after app starts                                                  |

*Spring MVC Flow
Client → Controller → Service → Repository → Database

IoC Container (ApplicationContext): Manages object creation and lifecycle.
Beans: All the objects managed by Spring.
Dependency Injection: Injecting required dependencies (beans) into classes automatically.
@Autowired: Automatically wires bean by type.
@Qualifier("productService1"): Used when multiple beans of the same type exist — tells Spring which one to use.

Singleton (default): Only one object of each bean is created and reused.
**Tight vs Loose Coupling
Tight: A a = new A(); (manual creation, hard to change)
Loose: @Autowired A a; (flexible, managed by Spring)

***different ways to create a Bean in Spring Boot**
///By creating Configure class an assigning Bean annotation before the function
@Cofiguration
public claass AccountConfig{
@Bean
public AccountService getAccountService(){
AccountService ac = new AccountService();
return new Accountservive();
}
}
class AccountService{
}
//By Annotation
@AnnotationName // @Service, @Component, @Controller,
@RestController or @Repository
class Car{
private String name;
private int miles;
Car(String name, int miles){
this.name = name;
this.miles = miles;
}
public void displayInfo(){
System.out.println("This is a car Named " + name + "Having
Miles " + miles);
}// those who needs the car object will have it
}// this Car class object now will be created and stored inside of IOC container

ACID Principles in Database Transactions:
ACID ensures that transactions are processed reliably in a database system.

🔹 A – Atomicity
A transaction is treated as a single unit.All steps must complete successfully, or none at all.If one step fails → the entire transaction is rolled back.
Ensures no partial updates occur.
🛠 Example (Git Analogy):
Imagine a feature branch being merged to the main branch.Before merge, it must pass all checks: code review, tests, approvals.
If one fails, merge is rejected → similar to rollback.Only when all steps succeed, changes are committed to main.
🔹 C – Consistency
A transaction brings the database from one valid state to another.
All defined rules and constraints (like foreign keys, data types) must be respected before and after the transaction.Ensures data integrity.
🔹 I – Isolation
Ensures transactions are executed independently, even when run concurrently.Prevents interference between transactions.Isolation Levels (from low to high):
Level	Description	Problem it Allows
1.Read Uncommitted	Can read uncommitted (dirty) data	Dirty Reads
2.Read Committed	Only reads committed data	Non-Repeatable Reads
3.Repeatable Read	Same data read multiple times → stays the same	Phantom Reads (but no non-repeatable)
4.Serializable	Highest level – full isolation like queue system.Prevents all issues
⚠ Common Issues in Isolation:
Dirty Read: Read uncommitted changes of another transaction.
Non-repeatable Read: Data changes between reads in the same transaction.
Phantom Read: New rows added by another transaction appear in re-queries.
🔹 D – Durability
Once a transaction is committed, the data is saved permanently.Survives system crashes, power loss, etc.Changes are written to non-volatile storage (like disk or SSD)

 *****Composition Over Inheritance***
Composition is a design principle where one class contains an object of another class to reuse its behavior, rather than inheriting from it.Use inheritance when classes are in an "is-a" relationship (e.g., Dog is a Animal), and use composition when classes are in a "has-a" or "uses-a" relationship.
In modern object-oriented design, composition is generally favored for flexibility and better code maintenance.Follows SOLID Principles	Especially Open/Closed and Single Responsibility
class Engine {
    void start() {
        System.out.println("Engine started");
    }
}

class Car {
    private Engine engine;

    Car() {
        engine = new Engine();  // Composition
    }

    void drive() {
        engine.start();
        System.out.println("Car is driving");
    }
}


SOLID is an acronym for five core principles that help developers write clean, maintainable, and scalable code.
🔹 S – Single Responsibility Principle (SRP)
“A class should have only one reason to change.”A class should focus on one job or responsibility.
Why? It makes the code easier to manage, test, and maintain.
✅ Example: A User class should not handle user data and sending emails. Create a separate EmailService.
🔹 O – Open/Closed Principle (OCP)
“Software entities should be open for extension but closed for modification.”You can extend a class’s behavior without modifying its existing code.
Helps in adding new features without touching tested and working code.
✅ Example: Instead of changing an existing class to add payment types, use inheritance or interface to extend new payment methods.
interface Payment {
    void pay();
}
class CreditCardPayment implements Payment {
    public void pay() {
        System.out.println("Paying by credit card");
    }
}
🔹 L – Liskov Substitution Principle (LSP)
“Objects of a superclass should be replaceable with objects of a subclass without breaking the application.” Subclasses should behave like the parent class without unexpected behavior.
✅ Example: If class Bird has fly(), then a subclass Penguin shouldn’t break the logic (since penguins can’t fly). So Penguin should not inherit Bird.
🔹 I – Interface Segregation Principle (ISP)
“Clients should not be forced to depend on interfaces they do not use.”Split large interfaces into smaller, more specific ones.
✅ Example: Don’t make one big interface Animal with walk(), fly(), swim().
Instead, create small interfaces like Walkable, Flyable, Swimmable so classes implement only what they need.
🔹 D – Dependency Inversion Principle (DIP)
“High-level modules should not depend on low-level modules. Both should depend on abstractions.”
Don’t hardcode dependencies. Use interfaces or abstractions.
Helps with flexibility and testing (e.g., mocking in unit tests).
✅ Example: Instead of new MySQLDatabase(), depend on a Database interface and inject the actual database later.
class App {
    private Database db;

    public App(Database db) {
        this.db = db; // Inject dependency
    }
}

Singleton Pattern
🔸 What it means:
Only one object is created from a class. Same object is used everywhere.For things that should only have one instance — like database connection, logger, settings, etc.
public class MySingleton {
    private static MySingleton obj;

    private MySingleton() {} // Private constructor

    public static MySingleton getInstance() {
        if (obj == null) {
            obj = new MySingleton();
        }
        return obj;
    }
}
2️⃣ Strategy Pattern

Change behavior (method) dynamically without changing the class.When you want to choose different logic/algorithm at runtime.
You want to pay using Bkash, Nagad, or Card.
interface Payment {
    void pay();
}

class Bkash implements Payment {
    public void pay() {
        System.out.println("Paying with Bkash");
    }
}

class Nagad implements Payment {
    public void pay() {
        System.out.println("Paying with Nagad");
    }
}

// You can switch between Bkash or Nagad
3️⃣ Factory Pattern

Create object based on some input, without telling which class to use.To make code cleaner when creating objects based on user input or condition.
class ShapeFactory {
    Shape getShape(String type) {
        if (type.equals("circle")) return new Circle();
        if (type.equals("square")) return new Square();
        return null;
    }
}
Instead of writing new Circle() everywhere, you just call getShape("circle").
4️⃣ Dependency Injection (DI)

Don't create objects inside a class. Instead, send (inject) them from outside.To write clean, testable code.Follows loose coupling (class doesn't depend directly on another class)
class Engine {
    void start() {
        System.out.println("Engine started");
    }
}

class Car {
    Engine engine;

    Car(Engine engine) { // inject engine from outside
        this.engine = engine;
    }

    void drive() {
        engine.start();
        System.out.println("Car is moving");
    }
}

System Design: Scaling, Load Balancer, Caching, and DB Replication
⚙️ 1. Types of Scaling
Type	Description
Vertical Scaling	Increase/decrease physical resources (CPU, RAM) of a single server. Simple, but has hardware limits and introduces a Single Point of Failure (SPOF).
Horizontal Scaling	Add multiple servers to distribute load. More reliable, handles SPOF better, but more complex to manage.
🔁 2. Single Point of Failure (SPOF)--If the main server fails, the whole system can go down..To prevent SPOF, use horizontal scaling and load balancers.
🔄 3. Load Balancer-- incoming client requests across multiple servers.Prevents overload on a single server.Private IPs are used for internal communication between servers.
Load balancing is automated and dynamic in horizontal scaling setups.
🧠 4. Caching--Reduces database load and speeds up data access.Used for frequently accessed but rarely changed data.Stores pre-computed results for faster retrieval.
Cache Retrieval Flow:Client request checks cache (fast).
If not found → fallback to DB.
Query executed (e.g., joins) → result stored in cache for next time.
Cache Eviction Policies:
LRU (Least Recently Used)	Removes the least recently used data first.
LFU (Least Frequently Used)	Removes data used least frequently.
FIFO (First-In-First-Out)	Removes oldest inserted data first.
💾 5. Database Scaling with Replication --When traffic is high, database scaling is expensive.
Use Replication (Master-Slave model):
Component	Role
Master DB	Handles write operations (insert, update, delete). Slave DB(s)	Handle read operations (select), offloading the master.
Changes in Master DB are synchronously or asynchronously copied (synced) to Slave(s).
If Master fails, a Slave is promoted to act as Master (failover mechanism).
🔒 6. Failover Mechanism in DB
Ensures high availability.Auto-promotion of a Slave if the Master goes down."sink" typically refers to the process or component that receives and applies changes from a source database (usually the master) to another system (like a replica/slave or downstream service)Handled by a monitoring system or tools like:
Zookeeper
Consul
Orchestrator


